#include<iostream>
#include<cstdlib>
#include<ctime>

// Функция по суммированию от 1-го до 5-ти (включительно) разных чисел:
double sum(double num1, double num2 = 0, double num3 = 0, double num4 = 0, double num5 = 0) {	// для чисел от 2-х до 5-ти присваиваем 0 (для возможности работы функции с разным кол-вом переменных от 1 до 5).
	return num1 + num2 + num3 + num4 + num5;	// возвращаем сумму всех чисел.
}
// Встраиваемая функция по нахождению среднего арифметического значения из 3-х чисел:
inline double arithmeticMean(double num1, double num2, double num3) {
	return (num1 + num2 + num3)/3;
}
// Перегруженная функция по нахождению максимального значения из 3-х чисел типа int:
int max(int num1, int num2, int num3) {
	int max = num1 > num2 ? num1 : num2;	// создаем переменную max и присваиваем ей максимальное значение из двух чисел (num1 и num2) с помощью тернарного оператора.
	max = num3 > max ? num3 : max;			// переменной max присваиваем максимальное значение из двух чисел (значение max и числа num3) с помощью тернарного оператора.
	std::cout << "Тип вводимых чисел INT;\nМаксимальное число - ";
	return max;		// возвращаем максимальное значение.
}
// Перегруженная функция по нахождению максимального значения из 3-х чисел типа short:
short max(short num1, short num2, short num3) {
	short max = num1 > num2 ? num1 : num2;		// описание функции см. строку 15
	max = num3 > max ? num3 : max;
	std::cout << "Тип вводимых чисел SHORT;\nМаксимальное число - ";
	return max;
}
// Перегруженная функция по нахождению максимального значения из 3-х чисел типа double:
double max(double num1, double num2, double num3) {
	double max = num1 > num2 ? num1 : num2;		// описание функции см. строку 15
	max = num3 > max ? num3 : max;
	std::cout << "Тип вводимых чисел DOUBLE;\nМаксимальное число - ";
	return max;
}
// Функция по инициализации массива:
template<typename T>
void initArray(T arr[], const int length) {
	for (int i = 0; i < length; i++) {	// перебираем каждый элемент в массиве
		arr[i] = rand() % (10 + 3) - 3;	// и присваиваем каждому случайное значение
		arr[i] += rand() % 10 * 0.1;	// Добавим к каждому элементу после запятой значение от 0.0 до 0.9 (дробь добавится только для double массива).
	}
}
// Функция по выводу массива в консоль:
template<typename T>
void showArray(T arr[], const int length) {
	std::cout << "{ ";
	for (int i = 0; i < length; i++)	// перебираем каждый элемент массива
		std::cout << arr[i] << ", ";	// и выводим его в консоль.
	std::cout << "\b\b }" << std::endl;
}
// Функция по обнулению всех чисел в массиве после первого отрицательного числа:
template<typename T>
void zeroingArray(T arr[], const int length) {
	for (int i = 0; i < length; i++)				// перебираем каждый элемент массива
		if (arr[i] < 0)								// при нахождении отрицательного значения элемента
			for (int j = i + 1; j < length; j++)	// запускаем цикл и перебираем все элементы после первого отрицательного и до последнего в массиве,
				arr[j] = 0;							// и обнуляем эти элементы.
}

int main() {
	setlocale(LC_ALL, "RU");
	int n = 4, m = 5, x = 2;	// Создадим и инициализируем переменные типа int
	short a = 3, b = 100, c = 9;	// Создадим и инициализируем переменные типа short
	double n1 = 3.0, n2 = 5.5, n3 = 2.5, n4 = 10.0, n5 = 8.1;	// Создадим и инициализируем переменные типа double
	
	// Задача 1. Создайте функцию, которая принимает от 1-го до 5 - ти (включительно) разных чисел,
	//  после чего возвращает их сумму. Для решения необходимо использовать параметры по умолчанию.
	// Учтите, что в функции должен быть один обязательный параметр.
	std::cout << "Задача 1. Суммирование от 1-го до 5-ти (включительно) разных чисел:\n";
	
	// Суммирование 5-ти чисел и вызов функции sum():
	std::cout << "1) " << n1 << " + " << n2 << " + " << n3 << " + " << n4 << " + " << n5 << " = " << sum(n1, n2, n3, n4, n5) << ';' << std::endl;
	// Суммирование 4-x чисел и вызов функции sum():
	std::cout << "2) " << n1 << " + " << n2 << " + " << n3 << " + " << n4 << " = " << sum(n1, n2, n3, n4) << ';' << std::endl;
	// Суммирование 3-x чисел и вызов функции sum():
	std::cout << "3) " << n1 << " + " << n2 << " + " << n3 << " = " << sum(n1, n2, n3) << ';' << std::endl;
	// Суммирование 2-x чисел и вызов функции sum():
	std::cout << "4) " << n1 << " + " << n2 << " = " << sum(n1, n2) << ';' << std::endl;
	// Суммирование 1-го числа и вызов функции sum():
	std::cout << "5) " << n1 << " = " << sum(n1) << '.' << std::endl;
	std::cout << std::endl;

	// Задача 2. Создайте встраиваемую функцию, которая принимает три числа и
	//  возвращает их среднее арифметическое.
	std::cout << "Задача 2. Нахождение среднее арифметическое из 3-х чисел:\n";
	// Приведем переменные и вызовем функцию arithmeticMean():
	std::cout << "1) Среднее арифметическое из чисел " << n1 << ", " << n2 << ", " << n3 << " равно " << arithmeticMean(n1, n2, n3) << std::endl;
	std::cout << "2) Среднее арифметическое из чисел " << n1 << ", " << n2 << ", " << n5 << " равно " << arithmeticMean(n1, n2, n5) << std::endl;
	std::cout << "3) Среднее арифметическое из чисел " << n1 << ", " << n3 << ", " << n4 << " равно " << arithmeticMean(n1, n3, n4) << std::endl;
	std::cout << std::endl;

	// Задача 3. Создайте перегруженную функцию для нахождения максимального из трёх переданных в неё значений.
	// Функция должна поддерживать типы int, short и double. Также функция должна выводить 
	// тип переданных в неё значений.
	std::cout << "Задача 3. Нахождения максимального из трех чисел:\n";
	std::cout << "1) " << "Найти максимальное значение из трех чисел: " << n << ", " << m << ", " << x << ";\n";
	std::cout << max(n, m, x) << std::endl;		// вызов функции max().
	std::cout << "2) " << "Найти максимальное значение из трех чисел: " << a << ", " << b << ", " << c << ";\n";
	std::cout << max(a, b, c) << std::endl;		// вызов функции max().
	std::cout << "3) " << "Найти максимальное значение из трех чисел: " << n1 << ", " << n2 << ", " << n3 << ";\n";
	std::cout << max(n1, n2, n3) << std::endl;	// вызов функции max().
	std::cout << std::endl;
	
	// Задaча 4. Напишите шаблонную функцию, которая принимает массив любого типа и его длину типа int.
	// Функция должна найти первое отрицательное число в массиве и обнулить все элементы массива,
	//  которые находятся справа от него.
	std::cout << "Задача 4. Вывод массивов разного типа, нахождение первого отрицательного значения и обнуление всех элементов после него.\n";
	const int size = 10;
	int arr1[size] {};		// Создаем массив типа int, состоящий из size элементов.
	short arr2[size] {};	// Создаем массив типа short, состоящий из size элементов.
	double arr3[size] {};	// Создаем массив типа double, состоящий из size элементов.
	srand(time(NULL)); // Запускаем генератор случайных чисел.
	std::cout << "\n1) Изначальный массив INT:\n";
	initArray(arr1, size);		// инициализируем массив aar1.
	showArray(arr1, size);		// выведим массив arr1 в консоль.
	std::cout << "Конечный массив INT:\n";
	zeroingArray(arr1, size);	// обнулим все элементы после первого отрицательного числа в массиве.
	showArray(arr1, size);		// выведим массив arr1 в консоль.
	std::cout << "2) Изначальный массив SHORT:\n";
	initArray(arr2, size);		// инициализируем массив aar1.
	showArray(arr2, size);		// выведим массив arr1 в консоль.
	std::cout << "Конечный массив SHORT:\n";
	zeroingArray(arr2, size);	// обнулим все элементы после первого отрицательного числа в массиве.	
	showArray(arr2, size);		// выведим массив arr1 в консоль.
	std::cout << "3) Изначальный массив DOUBLE:\n";
	initArray(arr3, size);		// инициализируем массив aar1.
	showArray(arr3, size);		// выведим массив arr1 в консоль.
	std::cout << "Конечный массив DOUBLE:\n";
	zeroingArray(arr3, size);	// обнулим все элементы после первого отрицательного числа в массиве.
	showArray(arr3, size);		// выведим массив arr1 в консоль.

	return 0;
}